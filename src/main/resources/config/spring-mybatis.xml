<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd 
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd">
  
    <!-- 引入配置文件 -->  
    <context:property-placeholder location="classpath:config/jdbc.properties" />
    
    <!-- 打印出执行sql慢的语句 -->
    <bean id="stat-filtert" class="com.alibaba.druid.filter.stat.StatFilter">  
	    <property name="slowSqlMillis" value="3000" />  
	    <property name="logSlowSql" value="true" />  
	</bean>  
  	
  	<!-- 配置数据库连接 -->
  	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName">
			<value>${jdbc.driver}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>

		<property name="proxyFilters">
			<list>
				<ref bean="stat-filtert" />
			</list>
		</property>
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize">
			<value>5</value>
		</property>
		<property name="minIdle">
			<value>5</value>
		</property>
		<property name="maxActive">
			<value>50</value>
		</property>
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait">
			<value>60000</value>
		</property>
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis">
			<value>60000</value>
		</property>
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis">
			<value>300000</value>
		</property>

		<property name="removeAbandoned">
			<value>true</value>
		</property>

		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<property name="removeAbandonedTimeout">
			<value>1800</value>
		</property>
		<property name="testWhileIdle">
			<value>true</value>
		</property> <!-- 打开检查,用异步线程evict进行检查 -->
		<property name="testOnBorrow">
			<value>true</value>
		</property>
		<property name="testOnReturn">
			<value>false</value>
		</property>
		<property name="validationQuery">
			<value>select 1 </value>
		</property>
		<property name="numTestsPerEvictionRun">
			<value>50</value>
		</property>
	</bean>
  	
  
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
    
    <!-- 开启AOP监听 只对当前配置文件有效 -->
	<aop:aspectj-autoproxy expose-proxy="true" />
	
	<!-- 开启注解事务 只对当前配置文件有效 proxy-target-class:允许直接注入实现类-->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="merge*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="put*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="use*" propagation="REQUIRED" rollback-for="Exception"/>
			
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" />
			
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 只对业务逻辑层实施事务,本平台业务较简单，省略service层 -->
		<aop:pointcut id="txPointcut" expression="execution(* com.xirui.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
    
    
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:config/mybatis/mybatis-conf.xml"></property>  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:config/mybatis/sql/*.xml"></property>  
    </bean>  
  	
  	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.xirui.mapper" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>
    
</beans>